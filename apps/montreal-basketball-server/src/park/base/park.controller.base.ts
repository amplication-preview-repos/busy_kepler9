/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParkService } from "../park.service";
import { ParkCreateInput } from "./ParkCreateInput";
import { Park } from "./Park";
import { ParkFindManyArgs } from "./ParkFindManyArgs";
import { ParkWhereUniqueInput } from "./ParkWhereUniqueInput";
import { ParkUpdateInput } from "./ParkUpdateInput";
import { EventFindManyArgs } from "../../event/base/EventFindManyArgs";
import { Event } from "../../event/base/Event";
import { EventWhereUniqueInput } from "../../event/base/EventWhereUniqueInput";

export class ParkControllerBase {
  constructor(protected readonly service: ParkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Park })
  async createPark(@common.Body() data: ParkCreateInput): Promise<Park> {
    return await this.service.createPark({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        numberOfCourts: true,
        numberOfPlayers: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Park] })
  @ApiNestedQuery(ParkFindManyArgs)
  async parks(@common.Req() request: Request): Promise<Park[]> {
    const args = plainToClass(ParkFindManyArgs, request.query);
    return this.service.parks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        numberOfCourts: true,
        numberOfPlayers: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Park })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async park(
    @common.Param() params: ParkWhereUniqueInput
  ): Promise<Park | null> {
    const result = await this.service.park({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        numberOfCourts: true,
        numberOfPlayers: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Park })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePark(
    @common.Param() params: ParkWhereUniqueInput,
    @common.Body() data: ParkUpdateInput
  ): Promise<Park | null> {
    try {
      return await this.service.updatePark({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          numberOfCourts: true,
          numberOfPlayers: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Park })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePark(
    @common.Param() params: ParkWhereUniqueInput
  ): Promise<Park | null> {
    try {
      return await this.service.deletePark({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          numberOfCourts: true,
          numberOfPlayers: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/events")
  @ApiNestedQuery(EventFindManyArgs)
  async findEvents(
    @common.Req() request: Request,
    @common.Param() params: ParkWhereUniqueInput
  ): Promise<Event[]> {
    const query = plainToClass(EventFindManyArgs, request.query);
    const results = await this.service.findEvents(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        organizer: true,

        park: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/events")
  async connectEvents(
    @common.Param() params: ParkWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        connect: body,
      },
    };
    await this.service.updatePark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/events")
  async updateEvents(
    @common.Param() params: ParkWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        set: body,
      },
    };
    await this.service.updatePark({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/events")
  async disconnectEvents(
    @common.Param() params: ParkWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        disconnect: body,
      },
    };
    await this.service.updatePark({
      where: params,
      data,
      select: { id: true },
    });
  }
}
